/* eslint-disable no-console */
// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clipboardy = require('clipboardy');
const clearConsole = require('react-dev-utils/clearConsole');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
const {
  createCompiler,
  // prepareProxy,
  prepareUrls,
} = require('../react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('../react-dev-utils/openBrowser');
const paths = require('../config/paths');
const appConfig = require('../config/app');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const { PROJECT_TYPES } = require('../constants');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
// 如果检测到单页应用，但没有必要的文件，那么Warn and crash
if (
  PROJECT_TYPES.SPA === appConfig.type &&
  !checkRequiredFiles([paths.appHtml, paths.appIndexJs])
) {
  process.exit(1);
}
// 如果检测到多页应用，但没有必要文件，那么Warn and crash
if (
  PROJECT_TYPES.MPA === appConfig.type &&
  !checkRequiredFiles([
    paths.appHtml,
    ...paths.appMPAEntries.map((item) => item[1]),
  ])
) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || appConfig.port || 8002;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST),
      )}`,
    ),
  );
  console.log(
    "If this was unintentional, check that you haven't mistakenly set it in your shell.",
  );
  console.log(
    `Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}`,
  );
  console.log();
}

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath, isInteractive)
  .then(() => {
    const port = DEFAULT_PORT;
    const config = configFactory('development');
    const protocol =
      appConfig.https || process.env.HTTPS === 'true' ? 'https' : 'http';
    const openBrowserAfterStart = process.env.MARVEL_OPEN_BROWSER === 'true';
    const { appName } = appConfig; // require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler({
      webpack,
      config,
      appName,
      urls,
      useYarn,
    });
    // Load proxy config
    // const proxySetting = require(paths.appPackageJson).proxy;
    const proxySetting = {
      ...appConfig.marvelProxySettings,
      ...appConfig.proxy[appConfig.active],
    };
    // const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
      // proxyConfig,
      proxySetting,
      urls.lanUrlForConfig,
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, (err) => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      clipboardy.writeSync(`http://localhost:${port}/`);
      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowserAfterStart && openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function (sig) {
      process.on(sig, function () {
        devServer.close();
        process.exit();
      });
    });
  })
  .catch((err) => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
